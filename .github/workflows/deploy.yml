# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      VPS_IP: "188.245.216.187"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H $VPS_IP  >> ~/.ssh/known_hosts
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/id_rsa
      - name: Deploy
        run: |
          cat << 'SCRIPT' > deploy_script.sh
          #!/bin/bash
          sudo apt install unzip -y
          export ADMIN_PASSWD="${{ vars.ADMIN_PASSWD }}"
          export PROJECT_DIR="${{ vars.PROJECT_DIR }}"
          export GITHUB_REPOSITORY="${{ github.repository }}"
          export SMTP_PASSWORD="${{vars.SMTP_PASSWORD}}"
          export SMTP_USER_NAME="${{vars.SMTP_USER_NAME}}"
          export MAIL_SMTP_FROM="${{vars.MAIL_SMTP_FROM}}"
          export OPEN_ID_CLIENT_SECRET="${{vars.OPEN_ID_CLIENT_SECRET}}"
          export AUTH_DOMAIN="${{vars.AUTH_DOMAIN}}"

          set -e  # Exit on errors
          echo "PROJECT_DIR=$PROJECT_DIR"
          echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
          echo "ADMIN_PASSWD=$ADMIN_PASSWD"
          echo "SMTP_PASSWORD=$SMTP_PASSWORD"
          # Check if the directory exists
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "Directory does not exist. Cloning the repository..."
            mkdir -p "$PROJECT_DIR"
            git clone "https://github.com/$GITHUB_REPOSITORY".git "$PROJECT_DIR"
          fi

          echo "Navigate to the project directory"
          cd "$PROJECT_DIR"

          echo "Ensure the repository is clean"
          git reset --hard
          git clean -fd
          git fetch origin main
          git reset --hard origin/main

          if [ -d "$PROJECT_DIR/addons/auth_oauth_autologin" ]; then
            echo "auth_oauth_autologin module already exists, skipping download."
          else
            echo "Downloading the latest version of auth_oauth_autologin module"
           curl -L https://github.com/OCA/server-auth/archive/refs/heads/14.0.zip -o auth_oauth_autologin.zip
            echo "Extracting the module"
            unzip auth_oauth_autologin.zip
            mv -v server-auth-14.0/auth_oauth_autologin "$PROJECT_DIR/addons/"
            rm -rf server-auth-14.0 auth_oauth_autologin.zip
          fi

          sed -i "s/%%admin_passwd%%/$ADMIN_PASSWD/g" odoo/odoo.conf    
          sed -i "s|%%SMTP_PASSWORD%%|$SMTP_PASSWORD|g" odoo/odoo.conf  
          sed -i "s/%%SMTP_USER_NAME%%/$SMTP_USER_NAME/g" odoo/odoo.conf  
          sed -i "s/%%MAIL_SMTP_FROM%%/$MAIL_SMTP_FROM/g" odoo/odoo.conf
          sed -i "s|%%AUTH_DOMAIN%%|$AUTH_DOMAIN|g" addons/frotaweb/data/oauth_provider_data.xml
          sed -i "s|%%OPEN_ID_CLIENT_SECRET%%|$OPEN_ID_CLIENT_SECRET|g" 18/odoo/addons/auth_oauth/models/res_users.py
        
          docker cp ./18.0 odoo:/usr/lib/python3/dist-packages

          echo "restart"
          docker-compose down
          docker-compose up -d
          docker cp ./18.0/odoo odoo:/usr/lib/python3/dist-packages
          SCRIPT
          chmod +x deploy_script.sh
          
          ssh root@$VPS_IP 'bash -s' < deploy_script.sh
